/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csc36503;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Application part where user selects an ID to view the recommended ID and 
 * associated cluster
 * @author Vincent
 */
public class Application extends javax.swing.JFrame {

    String histo = "Histos.ser";
    String keys = "BTree.txt";
    String vals = "Values.txt";
    String clusts = "Cluster.ser";
    HistogramTable hgt;
    ArrayList[] clusters;
    float[][] centroids;
    BTree bTree;
    String[] allKeys;

    /**
     * Creates new form Application
     */
    public Application() throws FileNotFoundException,
            IOException, ClassNotFoundException {
        initComponents();
        FileInputStream fi = new FileInputStream(histo);
        ObjectInputStream in = new ObjectInputStream(fi);
        hgt = (HistogramTable) in.readObject();
        in.close();
        fi.close();
        String[] temp = hgt.getAllKeys();
        String[] key = new String[(int)(temp.length)];
        bTree = new BTree(keys, vals);
        bTree.readExistingTree();
        int count = 0;
        for (int i = 0; i < temp.length; i++) {
            if (bTree.search(temp[i]) != null) {
                key[count] = temp[i];
                count++;
            }
        }
        allKeys = new String[count];
        for (int i = 0; i < count; i++) {
            allKeys[i] = key[i];
        }
        jList1.setListData(allKeys);
        clusters = new ArrayList[5];
        fi = new FileInputStream(clusts);
        in = new ObjectInputStream(fi);
        centroids = (float[][]) in.readObject();
        for (int i = 0; i < 5; i++) {
            clusters[i] = (ArrayList) in.readObject();
        }
        in.close();
        fi.close();
        int index = 0;
        int all = 0;
        int clusterSize = 0;
        for (ArrayList x: clusters) {
            clusterSize += x.size();
            ArrayList tempList = new ArrayList();
            for (int i = 0; i < allKeys.length; i++) {
                if (x.contains(allKeys[i])) {
                    tempList.add(allKeys[i]);
                    all++;
                }
            }
            clusters[index] = tempList;
            index++;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jTextField1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel4.setText("Enter Business ID:");

        jLabel5.setText("Select  Business ID:");

        jButton1.setText("Enter");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("Enter");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jLabel1.setText("Recommended Business ID:");

        jLabel2.setText("Other Business ID's in Category:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jTextField1)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                    .addComponent(jTextField2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jButton1)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jButton2)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        if (jTextField1.getText() != null) {
            String main = jTextField1.getText();
            boolean contains = false;
            for (String s: allKeys) {
                if (main.equals(s)) {
                    contains = true;
                }
            }
            if (!contains) {
                jTextField2.setText("Invalid ID");
                return;
            }
            /**
             * Create and populate star averages and cosine similarity values
             * for an ID
             */
            CosineSimTable cst = new CosineSimTable(main);
            cst.populate(hgt);
            double[] val = new double[allKeys.length];
            for (int i = 0; i < allKeys.length; i++) {
                if (!allKeys[i].equals(main)) {
                    try {
                        val[i] = recommendedV(cst.get(allKeys[i]), bTree.getVal(allKeys[i])[2]);
                    } catch (IOException ex) {
                        Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            /**
             * find ID with highest value
             */
            double best = 0;
            String best1 = "No recommended ID";
            int index = 0;
            double max = 0;
            for (int j = 0; j < allKeys.length; j++) {
                if (!allKeys[j].equals(main)) {
                    if (max < val[j]) {
                        index = j;
                        max = val[j];
                    }
                }
                best1 = allKeys[index];
                best = max;
                val[index] = 0;
            }
            jTextField2.setText(best1);
            /**
             * Finds the cluster it's in
             */
            String temp = "";
            int centroid = 0;
            for (int i = 0; i < clusters.length; i++) {
                if (clusters[i].contains(main)) {
                    centroid = i;
                    for (Object s: clusters[i]) {
                        if (!main.equals((String)s)) temp += (String)s + "\n";
                    }
                }
            }
            jTextArea1.setText("Centroid: " + centroid + "\nvalue: " 
                    + Arrays.toString(centroids[centroid]) + "\n------------------------------------------------\n" 
                    + temp);
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        if (jList1.getSelectedValue() != null) {
            String main = (String) jList1.getSelectedValue();
            /**
             * Create and populate star averages and cosine similarity values
             * for an ID
             */
            CosineSimTable cst = new CosineSimTable(main);
            cst.populate(hgt);
            double[] val = new double[allKeys.length];
            for (int i = 0; i < allKeys.length; i++) {
                if (!allKeys[i].equals(main)) {
                    try {
                        val[i] = recommendedV(cst.get(allKeys[i]), bTree.getVal(allKeys[i])[2]);
                    } catch (IOException ex) {
                        Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            /**
             * find ID with highest value
             */
            double best = 0;
            String best1 = "No recommended ID";
            int index = 0;
            double max = 0;
            for (int j = 0; j < allKeys.length; j++) {
                if (!allKeys[j].equals(main)) {
                    if (max < val[j]) {
                        index = j;
                        max = val[j];
                    }
                }
                best1 = allKeys[index];
                best = max;
                val[index] = 0;
            }
            jTextField2.setText(best1);
            /**
             * Finds the cluster it's in
             */
            String temp = "";
            int centroid = 0;
            for (int i = 0; i < clusters.length; i++) {
                if (clusters[i].contains(main)) {
                    centroid = i;
                    for (Object s: clusters[i]) {
                        if (!main.equals((String)s)) temp += (String)s + "\n";
                    }
                }
            }
            jTextArea1.setText("Centroid: " + centroid + "\nvalue: " 
                    + Arrays.toString(centroids[centroid]) + "\n------------------------------------------------\n" 
                    + temp);
        }
    }//GEN-LAST:event_jButton2MouseClicked

    /**
     * Main method of the Application
     * @param args the command line arguments
     * @throws java.io.FileNotFoundException
     */
    public static void main(String args[]) throws FileNotFoundException,
            IOException, ClassNotFoundException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Application().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    /**
     * Calculate weighted average
     * @param cs cosine similarity
     * @param s star average
     * @return
     */
    public static double recommendedV(double cs, double s) {
        double value = cs * 80;
        value += (s / 5) * 20;
        return value;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
